generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id          String   @id @default(cuid())
  username    String   @unique
  displayName String?
  avatarUrl   String?
  isActive    Boolean  @default(true)
  priority    String   @default("normal") // "high", "normal", "low"
  lastScanAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tweets      Tweet[]

  @@map("profiles")
}

model Tweet {
  id        String   @id
  content   String
  authorId  String
  createdAt DateTime
  url       String   @unique

  profile   Profile  @relation(fields: [authorId], references: [username])
  prompts   Prompt[]

  @@map("tweets")
}

model Category {
  id          String @id @default(cuid())
  name        String @unique
  slug        String @unique
  description String?

  subcategories Subcategory[]

  @@map("categories")
}

model Subcategory {
  id          String @id @default(cuid())
  name        String
  slug        String
  description String?
  categoryId  String

  category    Category @relation(fields: [categoryId], references: [id])
  prompts     Prompt[]

  @@unique([categoryId, slug])
  @@map("subcategories")
}

model Prompt {
  id          String      @id @default(cuid())
  content        String
  description    String?
  contentHash    String      @unique
  version        String      @default("1.0")
  parentId       String?
  subcategoryId  String
  tweetId        String
  extractedAt    DateTime    @default(now())

  subcategory    Subcategory @relation(fields: [subcategoryId], references: [id])
  tweet          Tweet       @relation(fields: [tweetId], references: [id])
  parent         Prompt?     @relation("PromptVersions", fields: [parentId], references: [id])
  versions       Prompt[]    @relation("PromptVersions")

  @@map("prompts")
}

model ScanLog {
  id          String   @id @default(cuid())
  profileId   String
  status      String   // 'success', 'error', 'partial'
  tweetsFound Int      @default(0)
  promptsFound Int     @default(0)
  requestsUsed Int     @default(0)
  errorMessage String?
  startedAt   DateTime @default(now())
  completedAt DateTime?

  @@map("scan_logs")
}

model ApiUsage {
  id          String   @id @default(cuid())
  month       String   @unique // Format: YYYY-MM
  requestsUsed Int     @default(0)
  lastUsedAt  DateTime @default(now())
  createdAt   DateTime @default(now())

  @@map("api_usage")
}